diff -Naur openstack-dashboard/local_settings.py openstack-dashboard-xai/local_settings.py
--- openstack-dashboard/local_settings.py       2016-07-12 11:14:14.000000000 +0300
+++ openstack-dashboard-xai/local_settings.py   2016-09-27 01:41:17.344659080 +0300
@@ -82,6 +82,7 @@
 # valid options are "AUTO"(default), "VNC", "SPICE", "RDP", "SERIAL" or None
 # Set to None explicitly if you want to deactivate the console.
 #CONSOLE_TYPE = "AUTO"
+CONSOLE_TYPE = "SPICE"
 
 # If provided, a "Report Bug" link will be displayed in the site header
 # which links to the value of this setting (ideally a URL containing
@@ -146,8 +147,8 @@
 #EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
 
 # Configure these for your outgoing email host
-#EMAIL_HOST = 'smtp.my-company.com'
-#EMAIL_PORT = 25
+EMAIL_HOST = '85.143.112.92'
+EMAIL_PORT = 25
 #EMAIL_HOST_USER = 'djangomail'
 #EMAIL_HOST_PASSWORD = 'top-secret!'
 
@@ -157,9 +158,9 @@
 #    ('http://cluster2.example.com:5000/v2.0', 'cluster2'),
 #]
 
-OPENSTACK_HOST = "127.0.0.1"
+OPENSTACK_HOST = "10.7.78.2"
 OPENSTACK_KEYSTONE_URL = "http://%s:5000/v2.0" % OPENSTACK_HOST
-OPENSTACK_KEYSTONE_DEFAULT_ROLE = "_member_"
+OPENSTACK_KEYSTONE_DEFAULT_ROLE = "admin"
 
 # Enables keystone web single-sign-on if set to True.
 #WEBSSO_ENABLED = False
@@ -218,7 +219,7 @@
 
 # Setting this to True, will add a new "Retrieve Password" action on instance,
 # allowing Admin session password retrieval/decryption.
-#OPENSTACK_ENABLE_PASSWORD_RETRIEVE = False
+OPENSTACK_ENABLE_PASSWORD_RETRIEVE = True
 
 # The Launch Instance user experience has been significantly enhanced.
 # You can choose whether to enable the new launch instance experience,
@@ -231,8 +232,8 @@
 # Toggle LAUNCH_INSTANCE_LEGACY_ENABLED and LAUNCH_INSTANCE_NG_ENABLED to
 # determine the experience to enable.  Set them both to true to enable
 # both.
-#LAUNCH_INSTANCE_LEGACY_ENABLED = True
-#LAUNCH_INSTANCE_NG_ENABLED = False
+LAUNCH_INSTANCE_LEGACY_ENABLED = False
+LAUNCH_INSTANCE_NG_ENABLED = True
 
 # A dictionary of settings which can be used to provide the default values for
 # properties found in the Launch Instance modal.
@@ -245,15 +246,15 @@
 # can_set_mount_point to True will add the option to set the mount point
 # from the UI.
 OPENSTACK_HYPERVISOR_FEATURES = {
-    'can_set_mount_point': False,
-    'can_set_password': False,
+    'can_set_mount_point': True,
+    'can_set_password': True,
     'requires_keypair': False,
 }
 
 # The OPENSTACK_CINDER_FEATURES settings can be used to enable optional
 # services provided by cinder that is not exposed by its extension API.
 OPENSTACK_CINDER_FEATURES = {
-    'enable_backup': False,
+    'enable_backup': True,
 }
 
 # The OPENSTACK_NEUTRON_NETWORK settings can be used to enable optional
@@ -369,7 +370,7 @@
 
 # The timezone of the server. This should correspond with the timezone
 # of your entire OpenStack installation, and hopefully be in UTC.
-TIME_ZONE = "UTC"
+TIME_ZONE = "Europe/Moscow"
 
 # When launching an instance, the menu of available flavors is
 # sorted by RAM usage, ascending. If you would like a different sort order,
diff -Naur openstack-dashboard/openstack_dashboard/api/nova.py openstack-dashboard-xai/openstack_dashboard/api/nova.py
--- openstack-dashboard/openstack_dashboard/api/nova.py 2016-06-02 21:08:42.000000000 +0300
+++ openstack-dashboard-xai/openstack_dashboard/api/nova.py     2016-10-03 11:41:07.248015757 +0300
@@ -830,6 +830,10 @@
     return novaclient(request).servers.get_password(instance_id, private_key)
 
 
+def change_password(request, instance_id, password):
+    return novaclient(request).servers.change_password(instance_id, password)
+
+
 def instance_volume_attach(request, volume_id, instance_id, device):
     return novaclient(request).volumes.create_server_volume(instance_id,
                                                             volume_id,
diff -Naur openstack-dashboard/openstack_dashboard/dashboards/project/instances/workflows/update_instance.py openstack-dashboard-xai/openstack_dashboard/dashboards/project/instances/workflows/update_instance.py
--- openstack-dashboard/openstack_dashboard/dashboards/project/instances/workflows/update_instance.py   2016-06-02 21:08:42.000000000 +0300
+++ openstack-dashboard-xai/openstack_dashboard/dashboards/project/instances/workflows/update_instance.py       2016-10-03 11:45:11.730660312 +0300
@@ -26,6 +26,9 @@
 from openstack_dashboard import api
 from openstack_dashboard.utils import filters
 
+import logging
+logger = logging.getLogger(__name__)
+
 INDEX_URL = "horizon:projects:instances:index"
 ADD_USER_URL = "horizon:projects:instances:create_user"
 INSTANCE_SEC_GROUP_SLUG = "update_security_groups"
@@ -126,6 +129,42 @@
     depends_on = ("instance_id",)
     contributes = ("name",)
 
+class UpdateInstanceRootPasswordAction(workflows.Action):
+    new_password         = forms.CharField(label=_("New password"),
+                           max_length=255, widget=forms.PasswordInput(), required=False)
+    new_password_confirm = forms.CharField(label=_("New password (confirm)"),
+                           max_length=255, widget=forms.PasswordInput(), required=False)
+
+    def handle(self, request, data):
+        if not data['new_password']:
+            return True
+
+        if data['new_password_confirm'] != data['new_password']:
+            exceptions.handle(request, "Passwords does not match")
+            return False
+
+        try:
+            instance_id = data['instance_id']
+
+            api.nova.change_password(request,
+                                   data['instance_id'],
+                                   data['new_password'])
+        except Exception:
+            exceptions.handle(request, ignore=True)
+            return False
+        return True
+
+    class Meta(object):
+        name = _("Root Password")
+        slug = 'instance_root_password'
+        help_text = _("Change internal root (admin) password of the container.")
+
+
+class UpdateInstanceRootPassword(workflows.Step):
+    action_class = UpdateInstanceRootPasswordAction
+    depends_on = ("instance_id",)
+    contributes = ("new_password","new_password_confirm",)
+
 
 class UpdateInstance(workflows.Workflow):
     slug = "update_instance"
@@ -135,7 +174,8 @@
     failure_message = _('Unable to modify instance "%s".')
     success_url = "horizon:project:instances:index"
     default_steps = (UpdateInstanceInfo,
-                     UpdateInstanceSecurityGroups)
+                     UpdateInstanceSecurityGroups,
+                     UpdateInstanceRootPassword)
 
     def format_status_message(self, message):
         return message % self.context.get('name', 'unknown instance')
